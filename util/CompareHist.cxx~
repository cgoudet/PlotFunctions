#include <iostream>
#include <vector>
#include "TFile.h"
#include "TH1D.h"
#include <string>
#include <fstream>
#include <math.h>
#include "TTree.h"

using std::string;
using std::cout;
using std::endl;
using std::vector;

#include "Template/DrawPlot.h"


int main() {

  bool isAlpha = 1;
  unsigned int doRatio = 0;
  bool normalize = false;
  int mode = 0 ;
  //0 = scale factors
  //1 = bias
  string title;

  vector< string> filesNames, legends;
  vector< string > histNames;
  vector<TFile*> files;
  vector<TH1*> hists;
  //Fill here the names of the input root files
  // alpha and sigma plots will be automatically taken from each files

  switch ( 1 ) {
  case 0 :
    isAlpha = 1;
    mode = 3;
    title = "ScaleFactors_" + string( isAlpha ? "alpha" : "c" );
    filesNames.push_back( "/sps/atlas/c/cgoudet/Calibration/PreRec/Saving/Hist2012.root" );
    histNames.push_back( "alpha" );
    filesNames.push_back( "/sps/atlas/c/cgoudet/Calibration/PreRec/Saving/ElectronEnergyScaleFactor.root" );
    histNames.push_back( "alpha68" );
    legends.push_back( "2012 Results" );
    legends.push_back( "2015, 68 bins" );
    break;

  case 1 :
    isAlpha = 0;
    title = "ScaleFactors_" + string( isAlpha ? "alpha" : "c" );
    filesNames.push_back( "/sps/atlas/c/cgoudet/Calibration/PreRec/Saving/Hist2012.root" );
    histNames.push_back( "sigma" );
    filesNames.push_back( "/sps/atlas/c/cgoudet/Calibration/PreRec/Saving/ElectronEnergyScaleFactor.root" );
    histNames.push_back( "sigma24" );
    legends.push_back( "2012 Results" );
    legends.push_back( "2015, 24 bins" );
    mode = 3;
    break;

  case 2 :
    isAlpha = 1;
    title = "Systematic_138TeV_" + string( isAlpha ? "alpha" : "c" );
    filesNames.push_back( "/sps/atlas/c/cgoudet/Calibration/PreRec/Results/Data68_MC13.root" );
    // filesNames.push_back( "/sps/atlas/c/cgoudet/Calibration/PreRec/Results/Data24Sigma_NUseEl15_MC13.root" );
    legends.push_back( "MC13TeV scales on MC8TeV Templates" );
    break;

  case 3 :
    isAlpha = 0;
    title = "CompareCorrection_" + string( isAlpha ? "alpha" : "c" );
    filesNames.push_back( "/sps/atlas/c/cgoudet/Calibration/PreRec/Results/Data24Sigma_NUseEl15.root" );
    filesNames.push_back( "/sps/atlas/c/cgoudet/Calibration/PreRec/Results/Data24Sigma_NUseEl15_34corrected.root" );
    legends.push_back( "68 bins correction" );
    legends.push_back( "34 bins correction" );
    break;

  }

  if ( legends.size() && legends.size()!=filesNames.size() ) { 
    cout << "Legends do not match number of hists" << endl;
    return 1;
  }


  
  for ( unsigned int plot = 0; plot < filesNames.size(); plot++ ) {
    files.push_back( 0 ); 
    hists.push_back( 0 );

    //Get the hitogram from the input file name
    files.back() = new TFile( filesNames[plot].c_str() );
    string dumName = files.back()->GetName();
    dumName = dumName.substr( dumName.find_last_of( "/" ) +1 );
    dumName = dumName.substr( 0, dumName.find_last_of( "." ) );

    switch ( mode ) {
    case 0 :
      hists.back() = (TH1D*) files.back()->Get( (isAlpha) ? "alpha" : "sigma" );
      break;
    case 1 : 
      hists.back() =  (TH1D*) files.back()->Get( (isAlpha) ? "biasAlpha" : "biasSigma" );
      break;
    case 3 : 
      hists.back() = (TH1D*) files.back()->Get( histNames[plot].c_str() );
      break;
    default :
      hists.back() = (TH1D*) files.back()->Get( TString(dumName) + "_cutFlow" );
      hists.back()->Sumw2();
    }

    //Change the name of the histogram to match the file name without the folder hierarchy
    hists.back()->SetName( dumName.c_str() );
  }

  vector< double > legendCoord;
  vector< double > rangeUser;
  //  rangeUser = { -0.051, 0.04};

  switch ( mode ) {
  case 0 : 
    legendCoord = { 0.35, 0.8, 0.7, 0.99 };
    legendCoord = { 0.2, 0.8, 0.55, 0.99 };
    hists.front()->GetXaxis()->SetTitle( "#eta_{calo}" );
    hists.front()->GetYaxis()->SetTitle( ( isAlpha ) ? "#alpha" : "c" );
    break;
  case 1 : 
    legendCoord =  { 0.7, 0.8, 0.99, 0.99 };
    hists.front()->GetXaxis()->SetTitle( TString( (isAlpha) ? "#alpha_{ij}" : "c_{ij}" ) +"bias (N#sigma)" );
    hists.front()->GetYaxis()->SetTitle( "# Config" );
    break;
  default : 
    legendCoord = { 0.35, 0.8, 0.7, 0.99 };
    hists.front()->GetXaxis()->SetTitle( "#eta_{calo}" );
    hists.front()->GetYaxis()->SetTitle( ( isAlpha ) ? "#alpha" : "c" );

  }


  DrawPlot( hists, "plot/"+ title ,  legends, doRatio, normalize, doRatio, 0, rangeUser, legendCoord );

  return 0;  
}
