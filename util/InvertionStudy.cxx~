#include <iostream>
#include "TFile.h"
#include "TTree.h"
#include <vector>
#include "TH1F.h"
#include "TString.h"
#include "TCanvas.h"
#include "TLegend.h"
#include "Template/DrawPlot.h"
#include "Template/InvertMatrix.h"
#include <vector>
#include <string>

using std::string;
using std::vector;
using std::cout;
using std::endl;

void Style_Christophe();


int main( ) {
  unsigned int inversionProcedure=1;
  unsigned int inputType = 1;
  unsigned int nBins = 6;
  double inputConstantValue = 0.0062348;
  double inputConstantError = 0.001;
  unsigned int readMatrix = 1;
  TFile inFile( "/home/goudet/Hgg/Zim/Calibration/TemplateMethod/150818_Note_430662875.root" );
//  TFile inFile( "/sps/atlas/c/cgoudet/Calibration/PreRec/Plots/Note_430662875.root" );
  string matrixName, matrixErrName;
  switch ( inputType ) {
  case 0 : 
    matrixName = "combinAlpha";
    matrixErrName = "combinErrAlpha";
    break;
  case 1 :
    matrixName = "combinSigma";
    matrixErrName = "combinErrSigma";
    break;
  }
  
  TMatrixD *combinMatrix = (TMatrixD*) inFile.Get( matrixName.c_str() );
  TMatrixD *combinErrMatrix = (TMatrixD*) inFile.Get( matrixErrName.c_str() );
  

  TMatrixD *subMatrix = new TMatrixD( nBins, nBins );
  TMatrixD *subErrMatrix = new TMatrixD( nBins, nBins );
  for ( unsigned int iLine = 0; iLine < (unsigned int) subMatrix->GetNrows(); iLine++ ) {
    for ( unsigned int iCol = 0; iCol < (unsigned int) subMatrix->GetNcols(); iCol++ ) {

      if ( readMatrix ) {
           (*subErrMatrix)(iLine, iCol) = (*combinErrMatrix)(iLine, iCol);
	   (*subMatrix)(iLine, iCol) = (*combinMatrix)(iLine, iCol);
      }
      else {
	(*subErrMatrix)(iLine, iCol) = inputConstantError;
	(*subMatrix)(iLine, iCol) = inputConstantValue;
      }
      
    }}

  //  (*subMatrix)(2,2)= inputConstantValue;

  TMatrixD *resultMatrix = new TMatrixD( nBins, 1);
  TMatrixD *resultErrMatrix= new TMatrixD( nBins,1);

  InvertMatrix( *subMatrix, *subErrMatrix, *resultMatrix, *resultErrMatrix, inputType, inversionProcedure );


  cout << "errMatrix" << endl;
  subErrMatrix->Print();
  cout << "combinMatrix" << endl;
  subMatrix->Print();

  cout << "resultMatrix : " << resultMatrix << endl;
  resultMatrix->Print();  

  cout << "resultErrMatrix" << endl;
  resultErrMatrix->Print();

  return 0;
}
